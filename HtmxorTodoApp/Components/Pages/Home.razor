@page "/"
@page "/{id:int}"
@inject Database Db
<PageTitle>Home</PageTitle>
<div id="tasks">
    <h1 class="display-4 mb-4">Tasks</h1>

    <form class="d-flex my-3" hx-post="/" hx-target="#tasks" @onpost="SaveTodoItem">
        <input class="form-control me-2" name="Form.Text" type="text" placeholder="Add Task..." aria-label="New Task">
        <button class="btn btn-outline-success" type="submit">Add</button>
    </form>

    @foreach (var group in ItemsByStatus)
    {
        <div class="container">
            <h2 class="display-6 mb-3 text-decoration-underline">@group.Key</h2>
            @if (group.Any())
            {
                <table class="table table-responsive-lg">
                    <thead class="bg-dark text-white">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Task</th>
                            <th scope="col">Priority</th>
                            <th scope="col">Complete</th>
                            <th scope="col">&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in group)
                        {
                            @if (item.IsSelected)
                            {
                                <tr>
                                    <th scope="row">
                                        @item.Id
                                        <input type="hidden" name="Form.Id" value="@item.Id" form="save" />
                                    </th>
                                    <td>
                                        <input type="text" name="Form.Text" value="@item.Text" class="form-control" placeholder="enter a task..." form="save" />
                                    </td>
                                    <td>
                                        <select class="form-select" name="Form.Priority" form="save">
                                            @foreach (var priority in TodoItemViewModel.Priorities)
                                            {
                                                <option value="@priority" selected=@(priority == item.Priority)>
                                                    @priority
                                                </option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <label class="form-check-label" asp-for="IsCompleted">
                                            <input class="form-check-input" type="checkbox" name="Form.IsCompleted" checked="@(item.IsCompleted ? "checked" : null)" value="True" form="save" />
                                        </label>
                                    </td>
                                    <td>
                                        <button type="submit"
                                                class="btn btn-outline-primary"
                                                form="save">
                                            Save
                                        </button>
                                        <button class="btn btn-outline-danger"
                                                hx-confirm="Are you sure?"
                                                hx-delete="/@item.Id"
                                                hx-target="#tasks"
                                                @ondelete="() => RemoveItem(item.Id)">
                                            Remove
                                        </button>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <th scope="row">@item.Id</th>
                                    <td>@item.Text</td>
                                    <td>
                                        <span class="badge bg-primary">@item.Priority</span>
                                    </td>
                                    <td>@item.CompletedDisplayText</td>
                                    <td>
                                        <button hx-get="/@item.Id"
                                                hx-target="#tasks"
                                                class="btn btn-outline-info">
                                            Edit
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info">
                    There are currently no @group.Key tasks
                </div>
            }
        </div>
    }

    <form method="post"
          id="save"
          hx-post="/"
          hx-target="#tasks"
          @onpost=@SaveTodoItem>
    </form>
</div>


@code {
    private List<TodoItem> items = [];
    private IEnumerable<IGrouping<string, TodoItemViewModel>> ItemsByStatus => items
        .Select(x => new TodoItemViewModel(x, x.Id == Id))
        .OrderByDescending(x => x.Completed)
        .ThenBy(x => x.Id)
        .GroupBy(x => x.IsCompleted ? "Completed" : "Pending")
        .OrderByDescending(x => x.Key); // puts pending before completed.

    [Parameter] public int Id { get; set; }
    [SupplyParameterFromForm] public TodoItemSaveModel? Form { get; set; }

    protected override async Task OnInitializedAsync()
    {
        items = await Db.Items
            .AsNoTracking()
            .ToListAsync();
    }

    private async Task SaveTodoItem()
    {
        if (Form is null)
            return;

        var item = Form.Id.HasValue
            ? items.Single(x => x.Id == Form.Id.Value)
            : new TodoItem();

        item.Completed = Form.IsCompleted ? DateTime.UtcNow : null;
        item.Text = Form.Text;
        item.Priority = Form.Priority;

        Db.Update(item);
        await Db.SaveChangesAsync();

        if (!Form.Id.HasValue)
        {
            items.Add(item);
        }
    }

    private async Task RemoveItem(int id)
    {
        var item = items.SingleOrDefault(x => x.Id == id);
        if (item is not null)
        {
            items.Remove(item);
            Db.Items.Remove(item);
            await Db.SaveChangesAsync();
        }
    }

    public class TodoItemViewModel(TodoItem item, bool isSelected)
    {
        public int Id => item.Id;
        public string Text => item.Text;
        public DateTime? Completed => item.Completed;
        public TodoItemPriority Priority => item.Priority;

        [DisplayName("Complete?")]
        public bool IsCompleted => item.IsCompleted;

        public bool IsSelected => isSelected;

        public string CompletedDisplayText => item.Completed.HasValue
            ? item.Completed.Value.ToString("yyyy MMMM dd")
            : "pending";

        public static TodoItemPriority[] Priorities { get; }
            = [TodoItemPriority.High, TodoItemPriority.Medium, TodoItemPriority.Low];
    }

    public record TodoItemSaveModel(
        int? Id,
        string Text,
        bool IsCompleted,
        TodoItemPriority Priority);
}